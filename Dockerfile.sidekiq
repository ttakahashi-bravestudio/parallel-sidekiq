# syntax=docker/dockerfile:1
# check=error=true

# AWS ECS Sidekiq専用Dockerfile
# 使用方法: docker build -f Dockerfile.sidekiq -t app-sidekiq .
# docker run -d --name sidekiq app-sidekiq

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version
ARG RUBY_VERSION=3.4.5
FROM public.ecr.aws/docker/library/ruby:$RUBY_VERSION-slim AS base

# Rails app lives here
WORKDIR /rails

# Install base packages including cron
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libjemalloc2 libvips sqlite3 default-libmysqlclient-dev cron && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Set production environment
ENV RAILS_ENV="production" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development"

# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages needed to build gems and node modules
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential git libyaml-dev node-gyp pkg-config python-is-python3 default-libmysqlclient-dev && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Install JavaScript dependencies
ARG NODE_VERSION=22.16.0
ARG YARN_VERSION=latest
ENV PATH=/usr/local/node/bin:$PATH
RUN curl -sL https://github.com/nodenv/node-build/archive/master.tar.gz | tar xz -C /tmp/ && \
    /tmp/node-build-master/bin/node-build "${NODE_VERSION}" /usr/local/node && \
    rm -rf /tmp/node-build-master
RUN corepack enable && yarn set version $YARN_VERSION

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

# Install node modules
COPY package.json yarn.lock ./
RUN yarn install --immutable

# Copy application code
COPY . .

# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile app/ lib/

# Precompiling assets for production without requiring secret RAILS_MASTER_KEY
RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile

RUN rm -rf node_modules

# Final stage for app image
FROM base

# Copy built artifacts: gems, application
COPY --from=build "${BUNDLE_PATH}" "${BUNDLE_PATH}"
COPY --from=build /rails /rails

# Create cron job file for ECS task monitoring
RUN echo "# ECS Task Monitoring Jobs" > /etc/cron.d/ecs-monitor && \
    echo "SHELL=/bin/bash" >> /etc/cron.d/ecs-monitor && \
    echo "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" >> /etc/cron.d/ecs-monitor && \
    echo "*/5 * * * * root cd /rails && bundle exec rails runner 'DeadLetterMonitorJob.perform_now' 2>&1 | logger -t ecs-monitor" >> /etc/cron.d/ecs-monitor && \
    echo "*/10 * * * * root cd /rails && bundle exec rails runner 'ForceShutdownMonitorJob.perform_now' 2>&1 | logger -t ecs-monitor" >> /etc/cron.d/ecs-monitor && \
    echo "*/15 * * * * root cd /rails && bundle exec rails runner 'IdleEcsTaskMonitorJob.perform_now' 2>&1 | logger -t ecs-monitor" >> /etc/cron.d/ecs-monitor && \
    echo "" >> /etc/cron.d/ecs-monitor

# Make cron job file executable
RUN chmod 0644 /etc/cron.d/ecs-monitor

# Create startup script for Sidekiq with cron
RUN echo '#!/bin/bash' > /rails/start-sidekiq.sh && \
    echo 'set -e' >> /rails/start-sidekiq.sh && \
    echo '' >> /rails/start-sidekiq.sh && \
    echo '# Start cron daemon with logging to stdout' >> /rails/start-sidekiq.sh && \
    echo 'service cron start' >> /rails/start-sidekiq.sh && \
    echo '' >> /rails/start-sidekiq.sh && \
    echo '# Redirect syslog to stdout for cron logs' >> /rails/start-sidekiq.sh && \
    echo 'tail -f /var/log/syslog | grep ecs-monitor &' >> /rails/start-sidekiq.sh && \
    echo '' >> /rails/start-sidekiq.sh && \
    echo '# Start Sidekiq' >> /rails/start-sidekiq.sh && \
    echo 'exec bundle exec sidekiq -C config/sidekiq.yml' >> /rails/start-sidekiq.sh && \
    chmod +x /rails/start-sidekiq.sh

# Run and own only the runtime files as a non-root user for security
RUN groupadd --system --gid 1000 rails && \
    useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash && \
    chown -R rails:rails db log storage tmp && \
    chown rails:rails /rails/start-sidekiq.sh

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start Sidekiq with cron monitoring
CMD ["/rails/start-sidekiq.sh"] 